% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/segmentTulipLeafChoice.R
\name{segmentTulipLeafChoice}
\alias{segmentTulipLeafChoice}
\title{Segment Tulip Leaf Choice}
\usage{
segmentTulipLeafChoice(
  map,
  radii,
  radiusTraversalType,
  weightByAttribute = NULL,
  quantizationWidth = NA,
  copyMap = TRUE,
  verbose = FALSE,
  progress = FALSE
)
}
\arguments{
\item{map}{A Segment ShapeGraph}

\item{radii}{A list of radii}

\item{radiusTraversalType}{The traversal type to keep track of whether the
analysis is within the each radius limit. See \link{TraversalType}}

\item{weightByAttribute}{The attribute to weigh the analysis with}

\item{quantizationWidth}{Set this to use chunks of this width instead of
continuous values for the cost of traversal. This is equivalent to the "tulip
bins" for depthmapX's tulip analysis (1024 tulip bins = pi/1024
quantizationWidth). Only works for Segment ShapeGraphs}

\item{copyMap}{Optional. Copy the internal sala map}

\item{verbose}{Optional. Show more information of the process.}

\item{progress}{Optional. Enable progress display}
}
\value{
A new map with the results included
}
\description{
This is the legacy calculation of choice where backwards traversal
was only started from "leaf" nodes i.e. nodes where the forwards
traversal originally found a dead end (from actual dead ends, to
dead ends because the next line has been covered through a different
path)
}
\examples{
# LatticeMap analysis (VGA)
mifFile <- system.file(
    "extdata", "testdata", "simple",
    "simple_interior.mif",
    package = "alcyon"
  )
  sfMap <- st_read(mifFile,
    geometry_column = 1L, quiet = TRUE
  )
  latticeMap <- makeVGALatticeMap(
    sfMap,
    gridSize = 0.5,
    fillX = 3.0,
    fillY = 6.0,
    maxVisibility = NA,
    boundaryGraph = FALSE,
    verbose = FALSE
  )
allToAllTraverse(latticeMap,
  traversalType = TraversalType$Angular,
  radii = -1L,
  radiusTraversalType = TraversalType$None
)

# Axial analysis
mifFile <- system.file(
    "extdata", "testdata", "barnsbury",
    "barnsbury_small_axial_original.mif",
    package = "alcyon"
  )
  sfMap <- st_read(mifFile,
    geometry_column = 1L, quiet = TRUE
  )
  shapeGraph <- as(sfMap, "AxialShapeGraph")
allToAllTraverse(
  shapeGraph,
  traversalType = TraversalType$Topological,
  radii = c("n", "3"),
  includeBetweenness = TRUE
)

# Segment analysis
mifFile <- system.file(
    "extdata", "testdata", "barnsbury",
    "barnsbury_small_segment_original.mif",
    package = "alcyon"
  )
  sfMap <- st_read(mifFile,
    geometry_column = 1L, quiet = TRUE
  )
  shapeGraph <- as(sfMap, "SegmentShapeGraph")
segmentTulipLeafChoice(
  shapeGraph,
  radii = c("n", "100"),
  radiusTraversalType = TraversalType$Metric,
  weightByAttribute = "Segment Length",
  quantizationWidth = pi / 1024L,
  verbose = FALSE,
  progress = FALSE
)
}
